//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
// Zen Spaces
//
// Copyright (C) 2001 - 2009 Tony Richards
//
// Licensed under the Games by Sarge Publishing License - See your licensing
// agreement for terms and conditions.
//
// Do not redistribute this source code.
//
// Tony Richards trichards@gamesbysarge.com
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
// This is generated by the Zen Spaces Code Generator.  Do not modify!
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
#ifndef ZEN_STUDIO_WORKBENCH_I_WORKBENCHATTRIBUTE_DATA_MAP_HPP_INCLUDED
#define ZEN_STUDIO_WORKBENCH_I_WORKBENCHATTRIBUTE_DATA_MAP_HPP_INCLUDED

#include "Configuration.hpp"

#include <Zen/Core/Memory/managed_ptr.hpp>

#include <Zen/Enterprise/Database/I_DatabaseConnection.hpp>
#include <Zen/Enterprise/Database/I_DatabaseService.hpp>
#include <Zen/Enterprise/Database/I_DatabaseTransaction.hpp>

#include <boost/cstdint.hpp>

#include <boost/noncopyable.hpp>

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
namespace Zen {
namespace Studio {
namespace Workbench {
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

class I_WorkbenchAttributeDomainObject;
class I_WorkbenchAttributeDataCollection;

class WORKBENCHMODEL_DLL_LINK I_WorkbenchAttributeDataMap
:	public boost::noncopyable
{

    /// @name Types
    /// @{
public:
//    typedef Zen::Memory::managed_ptr<I_WorkbenchAttributeDomainObject>   pWorkbenchAttributeDomainObject_type;
//    typedef Zen::Memory::managed_ptr<I_WorkbenchAttributeDataCollection>     pWorkbenchAttributeDataCollection_type;
    typedef Zen::Memory::managed_ptr<I_WorkbenchAttributeDataMap>        pWorkbenchAttributeDataMap_type;

    typedef Zen::Database::I_DatabaseService::pDatabaseConnection_type      pDatabaseConnection_type;

    typedef Zen::Memory::managed_ptr<I_WorkbenchAttributeDataCollection>  pWorkbenchAttributeDataCollection_type;
    typedef Zen::Event::future_return_value<pWorkbenchAttributeDataCollection_type>  FutureWorkbenchAttributeDataCollection_type;
	typedef Zen::Memory::managed_ptr<FutureWorkbenchAttributeDataCollection_type>    pFutureWorkbenchAttributeDataCollection_type;
    
    typedef Zen::Memory::managed_ptr<I_WorkbenchAttributeDomainObject>  pWorkbenchAttributeDomainObject_type;
    typedef Zen::Event::future_return_value<pWorkbenchAttributeDomainObject_type>  FutureWorkbenchAttributeDomainObject_type;
	typedef Zen::Memory::managed_ptr<FutureWorkbenchAttributeDomainObject_type>    pFutureWorkbenchAttributeDomainObject_type;
    /// @}

    /// @name I_WorkbenchAttributeDataMap interface
    /// @{
public:
    /// Create a new WorkbenchAttributeDomainObject.
    virtual pWorkbenchAttributeDomainObject_type createNew() = 0;
    
    /// Get an object by primary key.
    virtual pFutureWorkbenchAttributeDomainObject_type getByKey(boost::uint64_t _primaryKeyValue) = 0;

    /// Delete an object by primary key.
    virtual void deleteByKey(boost::uint64_t _primaryKeyValue) = 0;

    /// Get all of the records.
    virtual pFutureWorkbenchAttributeDataCollection_type getAll() = 0;

    /// Update a WorkbenchAttributeDomainObject.
    /// If the WorkbenchAttributeDomainObject hasn't been inserted yet, it will be inserted.
    virtual Zen::Database::I_DatabaseTransaction::pFutureKey_type update(pWorkbenchAttributeDomainObject_type _pWorkbenchAttributeDomainObject) = 0;
    /// @}

    /// @name Static class factory
    /// @{
public:
    static pWorkbenchAttributeDataMap_type create(pDatabaseConnection_type _pDatabaseConnection);
    /// @}

    /// @name 'Structors
    /// @{
protected:
             I_WorkbenchAttributeDataMap();
    virtual ~I_WorkbenchAttributeDataMap();
    /// @}

};  // interface I_WorkbenchAttributeDataMap

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
}   // namespace Zen
}   // namespace Studio
}   // namespace Workbench
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

namespace Zen {
namespace Memory {
    /// I_WorkbenchAttributeDataMap is a managed by factory
    template<>
    struct is_managed_by_factory<Zen::Studio::Workbench::I_WorkbenchAttributeDataMap> : public boost::true_type{};
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
}   // namespace Memory
}   // namespace Zen
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

#endif // ZEN_STUDIO_WORKBENCH_I_WORKBENCHATTRIBUTE_DATA_MAP_HPP_INCLUDED
