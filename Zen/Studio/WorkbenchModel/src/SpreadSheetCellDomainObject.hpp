//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
// Zen Spaces
//
// Copyright (C) 2001 - 2009 Tony Richards
//
// Licensed under the Games by Sarge Publishing License - See your licensing
// agreement for terms and conditions.
//
// Do not redistribute this source code.
//
// Tony Richards trichards@gamesbysarge.com
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
// This is generated by the Zen Spaces Code Generator.  Do not modify!
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
#ifndef ZEN_STUDIO_WORKBENCH_SPREADSHEETCELL_DOMAIN_OBJECT_HPP_INCLUDED
#define ZEN_STUDIO_WORKBENCH_SPREADSHEETCELL_DOMAIN_OBJECT_HPP_INCLUDED

#include "../I_SpreadSheetCellDomainObject.hpp"

#include <map>

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
namespace Zen {
namespace Studio {
namespace Workbench {
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~


class SpreadSheetCellDomainObject
:	public I_SpreadSheetCellDomainObject
{
    /// @name Types
    /// @{
public:
    typedef std::map<std::string, pElement_type>    FieldElementMap_type;
    /// @}

    /// @name Getter / Setter methods
    /// @{
public:
    /// Get the SpreadSheetCellId element.
    /// Use this return value to check to see if the column is NULL in the database,
    /// or you can use it to modify the value instead of calling setSpreadSheetCellId().
    virtual ElementReference_type getSpreadSheetCellId() const;
    
    /// Set the SpreadSheetCellId element value.
    /// This method does not directly update the database.  
    /// You must use the I_SpreadSheetCellDataMap::update() method for the modifications
    /// to be persisted.
    virtual void setSpreadSheetCellId(const boost::any& _value);

    /// Get the SpreadSheetDocumentId element.
    /// Use this return value to check to see if the column is NULL in the database,
    /// or you can use it to modify the value instead of calling setSpreadSheetDocumentId().
    virtual ElementReference_type getSpreadSheetDocumentId() const;
    
    /// Set the SpreadSheetDocumentId element value.
    /// This method does not directly update the database.  
    /// You must use the I_SpreadSheetCellDataMap::update() method for the modifications
    /// to be persisted.
    virtual void setSpreadSheetDocumentId(const boost::any& _value);

    /// Get the SpreadSheetRowId element.
    /// Use this return value to check to see if the column is NULL in the database,
    /// or you can use it to modify the value instead of calling setSpreadSheetRowId().
    virtual ElementReference_type getSpreadSheetRowId() const;
    
    /// Set the SpreadSheetRowId element value.
    /// This method does not directly update the database.  
    /// You must use the I_SpreadSheetCellDataMap::update() method for the modifications
    /// to be persisted.
    virtual void setSpreadSheetRowId(const boost::any& _value);

    /// Get the SpreadSheetColumnId element.
    /// Use this return value to check to see if the column is NULL in the database,
    /// or you can use it to modify the value instead of calling setSpreadSheetColumnId().
    virtual ElementReference_type getSpreadSheetColumnId() const;
    
    /// Set the SpreadSheetColumnId element value.
    /// This method does not directly update the database.  
    /// You must use the I_SpreadSheetCellDataMap::update() method for the modifications
    /// to be persisted.
    virtual void setSpreadSheetColumnId(const boost::any& _value);

    /// Get the ValueType element.
    /// Use this return value to check to see if the column is NULL in the database,
    /// or you can use it to modify the value instead of calling setValueType().
    virtual ElementReference_type getValueType() const;
    
    /// Set the ValueType element value.
    /// This method does not directly update the database.  
    /// You must use the I_SpreadSheetCellDataMap::update() method for the modifications
    /// to be persisted.
    virtual void setValueType(const boost::any& _value);

    /// Get the Value element.
    /// Use this return value to check to see if the column is NULL in the database,
    /// or you can use it to modify the value instead of calling setValue().
    virtual ElementReference_type getValue() const;
    
    /// Set the Value element value.
    /// This method does not directly update the database.  
    /// You must use the I_SpreadSheetCellDataMap::update() method for the modifications
    /// to be persisted.
    virtual void setValue(const boost::any& _value);
    
    virtual Zen::Enterprise::DataModel::I_DataElement& getElement(const std::string& _fieldName);
    /// @}

    /// @name Member Variables
    /// @{
private:
    pElement_type               m_pSpreadSheetCellId;
    pElement_type               m_pSpreadSheetDocumentId;
    pElement_type               m_pSpreadSheetRowId;
    pElement_type               m_pSpreadSheetColumnId;
    pElement_type               m_pValueType;
    pElement_type               m_pValue;

    FieldElementMap_type            m_elements;
    /// @}

    /// @name 'Structors
    /// @{
public:
             SpreadSheetCellDomainObject();
    virtual ~SpreadSheetCellDomainObject();
    /// @}

};  // class SpreadSheetCellDomainObject

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
}   // namespace Zen
}   // namespace Studio
}   // namespace Workbench
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~


#endif // ZEN_STUDIO_WORKBENCH_SPREADSHEETCELL_DOMAIN_OBJECT_HPP_INCLUDED
