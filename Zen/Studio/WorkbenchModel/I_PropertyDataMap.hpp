//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
// Zen Spaces
//
// Copyright (C) 2001 - 2009 Tony Richards
//
// Licensed under the Games by Sarge Publishing License - See your licensing
// agreement for terms and conditions.
//
// Do not redistribute this source code.
//
// Tony Richards trichards@gamesbysarge.com
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
// This is generated by the Zen Spaces Code Generator.  Do not modify!
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
#ifndef ZEN_STUDIO_WORKBENCH_I_PROPERTY_DATA_MAP_HPP_INCLUDED
#define ZEN_STUDIO_WORKBENCH_I_PROPERTY_DATA_MAP_HPP_INCLUDED

#include "Configuration.hpp"

#include <Zen/Core/Memory/managed_ptr.hpp>

#include <Zen/Enterprise/Database/I_DatabaseConnection.hpp>
#include <Zen/Enterprise/Database/I_DatabaseService.hpp>
#include <Zen/Enterprise/Database/I_DatabaseTransaction.hpp>

#include <boost/cstdint.hpp>

#include <boost/noncopyable.hpp>

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
namespace Zen {
namespace Studio {
namespace Workbench {
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

class I_PropertyDomainObject;
class I_PropertyDataCollection;

class WORKBENCHMODEL_DLL_LINK I_PropertyDataMap
:	public boost::noncopyable
{

    /// @name Types
    /// @{
public:
//    typedef Zen::Memory::managed_ptr<I_PropertyDomainObject>   pPropertyDomainObject_type;
//    typedef Zen::Memory::managed_ptr<I_PropertyDataCollection>     pPropertyDataCollection_type;
    typedef Zen::Memory::managed_ptr<I_PropertyDataMap>        pPropertyDataMap_type;

    typedef Zen::Database::I_DatabaseService::pDatabaseConnection_type      pDatabaseConnection_type;

    typedef Zen::Memory::managed_ptr<I_PropertyDataCollection>  pPropertyDataCollection_type;
    typedef Zen::Event::future_return_value<pPropertyDataCollection_type>  FuturePropertyDataCollection_type;
	typedef Zen::Memory::managed_ptr<FuturePropertyDataCollection_type>    pFuturePropertyDataCollection_type;
    
    typedef Zen::Memory::managed_ptr<I_PropertyDomainObject>  pPropertyDomainObject_type;
    typedef Zen::Event::future_return_value<pPropertyDomainObject_type>  FuturePropertyDomainObject_type;
	typedef Zen::Memory::managed_ptr<FuturePropertyDomainObject_type>    pFuturePropertyDomainObject_type;
    /// @}

    /// @name I_PropertyDataMap interface
    /// @{
public:
    /// Create a new PropertyDomainObject.
    virtual pPropertyDomainObject_type createNew() = 0;
    
    /// Get an object by primary key.
    virtual pFuturePropertyDomainObject_type getByKey(boost::uint64_t _primaryKeyValue) = 0;

    /// Delete an object by primary key.
    virtual void deleteByKey(boost::uint64_t _primaryKeyValue) = 0;

    /// Get the properties by propertiesId.    
    virtual pFuturePropertyDataCollection_type getByPropertiesId(const boost::uint64_t _propertiesId) = 0;

    /// Get all of the records.
    virtual pFuturePropertyDataCollection_type getAll() = 0;

    /// Update a PropertyDomainObject.
    /// If the PropertyDomainObject hasn't been inserted yet, it will be inserted.
    virtual Zen::Database::I_DatabaseTransaction::pFutureKey_type update(pPropertyDomainObject_type _pPropertyDomainObject) = 0;
    /// @}

    /// @name Static class factory
    /// @{
public:
    static pPropertyDataMap_type create(pDatabaseConnection_type _pDatabaseConnection);
    /// @}

    /// @name 'Structors
    /// @{
protected:
             I_PropertyDataMap();
    virtual ~I_PropertyDataMap();
    /// @}

};  // interface I_PropertyDataMap

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
}   // namespace Zen
}   // namespace Studio
}   // namespace Workbench
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

namespace Zen {
namespace Memory {
    /// I_PropertyDataMap is a managed by factory
    template<>
    struct is_managed_by_factory<Zen::Studio::Workbench::I_PropertyDataMap> : public boost::true_type{};
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
}   // namespace Memory
}   // namespace Zen
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

#endif // ZEN_STUDIO_WORKBENCH_I_PROPERTY_DATA_MAP_HPP_INCLUDED
