//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
// Zen Community Framework
//
// Copyright (C) 2001 - 2010 Tony Richards
// Copyright (C) 2008 - 2010 Matthew Alan Gray
//
//  This software is provided 'as-is', without any express or implied
//  warranty.  In no event will the authors be held liable for any damages
//  arising from the use of this software.
//
//  Permission is granted to anyone to use this software for any purpose,
//  including commercial applications, and to alter it and redistribute it
//  freely, subject to the following restrictions:
//
//  1. The origin of this software must not be misrepresented; you must not
//     claim that you wrote the original software. If you use this software
//     in a product, an acknowledgment in the product documentation would be
//     appreciated but is not required.
//  2. Altered source versions must be plainly marked as such, and must not be
//     misrepresented as being the original software.
//  3. This notice may not be removed or altered from any source distribution.
//
//  Tony Richards trichards@indiezen.com
//  Matthew Alan Gray mgray@indiezen.org
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
// This is generated by the Zen Protocol Code Generator.  Do not modify!
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
#include "MessageFactory.hpp"
#include "Message.hpp"

#include "CreateChannelRequest.hpp"
#include "CreateChannelResponse.hpp"

#include "UnsubscribeChannelModelRequest.hpp"
#include "UnsubscribeChannelModelResponse.hpp"

#include "DeleteChannelRequest.hpp"
#include "DeleteChannelResponse.hpp"

#include "UpdateChannelRequest.hpp"
#include "UpdateChannelResponse.hpp"

#include "ReadChannelRequest.hpp"
#include "ReadChannelResponse.hpp"

#include "JoinChannelRequest.hpp"
#include "JoinChannelResponse.hpp"

#include "SubscribeChannelModelRequest.hpp"
#include "SubscribeChannelModelResponse.hpp"

#include "ChannelModelUpdateMessage.hpp"

#include <Zen/Enterprise/AppServer/I_NumericTypeMessageRegistry.hpp>
#include <Zen/Enterprise/AppServer/I_MessageHeader.hpp>

#include <Zen/Enterprise/Networking/I_Endpoint.hpp>

#include <Zen/Core/Utility/runtime_exception.hpp>

#include <stddef.h>

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
namespace Zen {
namespace Community {
namespace Protocol {
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
MessageFactory::MessageFactory()
{
}

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
MessageFactory::~MessageFactory()
{
}

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
void
MessageFactory::destroy(MessageFactory::wpMessage_type _pMessage)
{
    Message* pMessage = dynamic_cast<Message*>(_pMessage.get());
    
    if (pMessage != NULL)
    {
        delete pMessage;
    }
    else
    {
        // TODO Error
    }
}

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
MessageFactory::pMessage_type
MessageFactory::create(pMessageHeader_type _pMessageHeader, pEndpoint_type _pSourceEndpoint, pEndpoint_type _pDestinationEndpoint)
{
    switch(getMessageType(_pMessageHeader))
    {
        case CreateChannelRequest::type:
            return pMessage_type(new CreateChannelRequest(_pMessageHeader,
                                    _pSourceEndpoint, 
                                    _pDestinationEndpoint),
                                 &destroy);

        case UnsubscribeChannelModelRequest::type:
            return pMessage_type(new UnsubscribeChannelModelRequest(_pMessageHeader,
                                    _pSourceEndpoint, 
                                    _pDestinationEndpoint),
                                 &destroy);

        case DeleteChannelRequest::type:
            return pMessage_type(new DeleteChannelRequest(_pMessageHeader,
                                    _pSourceEndpoint, 
                                    _pDestinationEndpoint),
                                 &destroy);

        case UpdateChannelRequest::type:
            return pMessage_type(new UpdateChannelRequest(_pMessageHeader,
                                    _pSourceEndpoint, 
                                    _pDestinationEndpoint),
                                 &destroy);

        case ReadChannelRequest::type:
            return pMessage_type(new ReadChannelRequest(_pMessageHeader,
                                    _pSourceEndpoint, 
                                    _pDestinationEndpoint),
                                 &destroy);

        case JoinChannelRequest::type:
            return pMessage_type(new JoinChannelRequest(_pMessageHeader,
                                    _pSourceEndpoint, 
                                    _pDestinationEndpoint),
                                 &destroy);

        case SubscribeChannelModelRequest::type:
            return pMessage_type(new SubscribeChannelModelRequest(_pMessageHeader,
                                    _pSourceEndpoint, 
                                    _pDestinationEndpoint),
                                 &destroy);

        case ChannelModelUpdateMessage::type:
            return pMessage_type(new ChannelModelUpdateMessage(_pMessageHeader,
                    _pSourceEndpoint, _pDestinationEndpoint),
                &destroy);

        case CreateChannelResponse::type:
            return pMessage_type(new CreateChannelResponse(_pMessageHeader,
                                    _pSourceEndpoint, 
                                    _pDestinationEndpoint),
                                 &destroy);

        case UnsubscribeChannelModelResponse::type:
            return pMessage_type(new UnsubscribeChannelModelResponse(_pMessageHeader,
                                    _pSourceEndpoint, 
                                    _pDestinationEndpoint),
                                 &destroy);

        case DeleteChannelResponse::type:
            return pMessage_type(new DeleteChannelResponse(_pMessageHeader,
                                    _pSourceEndpoint, 
                                    _pDestinationEndpoint),
                                 &destroy);

        case UpdateChannelResponse::type:
            return pMessage_type(new UpdateChannelResponse(_pMessageHeader,
                                    _pSourceEndpoint, 
                                    _pDestinationEndpoint),
                                 &destroy);

        case ReadChannelResponse::type:
            return pMessage_type(new ReadChannelResponse(_pMessageHeader,
                                    _pSourceEndpoint, 
                                    _pDestinationEndpoint),
                                 &destroy);

        case JoinChannelResponse::type:
            return pMessage_type(new JoinChannelResponse(_pMessageHeader,
                                    _pSourceEndpoint, 
                                    _pDestinationEndpoint),
                                 &destroy);

        case SubscribeChannelModelResponse::type:
            return pMessage_type(new SubscribeChannelModelResponse(_pMessageHeader,
                                    _pSourceEndpoint, 
                                    _pDestinationEndpoint),
                                 &destroy);

   
    }

    // TODO Error?
    return pMessage_type();
}
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

boost::uint32_t
MessageFactory::getMessageType(pMessageHeader_type _pMessageHeader)
{
    // Assume this is a numeric type.
    Zen::Enterprise::AppServer::I_NumericTypeMessageRegistry::I_NumericType*
        pType = dynamic_cast<Zen::Enterprise::AppServer::I_NumericTypeMessageRegistry::I_NumericType*>
            (_pMessageHeader->getMessageType().get());

    if (pType != NULL)
    {
        return pType->getType();
    }
    else
    {        
        throw Zen::Utility::runtime_exception("MessageFactory::getMessageType(): Error, invalid message type.");
    }
}

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
}   // namespace Zen
}   // namespace Community
}   // namespace Protocol
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
