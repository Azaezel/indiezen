//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
// Zen Spaces
//
// Copyright (C) 2001 - 2009 Tony Richards
//
// Licensed under the Games by Sarge Publishing License - See your licensing
// agreement for terms and conditions.
//
// Do not redistribute this source code.
//
// Tony Richards trichards@gamesbysarge.com
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
// This is generated by the Zen Spaces Code Generator.  Do not modify!
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
#ifndef ZEN_COMMUNITY_ACCOUNT_I_GROUPMEMBER_DATA_MAP_HPP_INCLUDED
#define ZEN_COMMUNITY_ACCOUNT_I_GROUPMEMBER_DATA_MAP_HPP_INCLUDED

#include "Configuration.hpp"

#include <Zen/Core/Memory/managed_ptr.hpp>

#include <Zen/Enterprise/Database/I_DatabaseConnection.hpp>
#include <Zen/Enterprise/Database/I_DatabaseService.hpp>
#include <Zen/Enterprise/Database/I_DatabaseTransaction.hpp>

#include <boost/cstdint.hpp>

#include <boost/noncopyable.hpp>

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
namespace Zen {
namespace Community {
namespace Account {
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

class I_GroupMemberDomainObject;
class I_GroupMemberDataCollection;

class ACCOUNTMODEL_DLL_LINK I_GroupMemberDataMap
:	public boost::noncopyable
{

    /// @name Types
    /// @{
public:
//    typedef Zen::Memory::managed_ptr<I_GroupMemberDomainObject>   pGroupMemberDomainObject_type;
//    typedef Zen::Memory::managed_ptr<I_GroupMemberDataCollection>     pGroupMemberDataCollection_type;
    typedef Zen::Memory::managed_ptr<I_GroupMemberDataMap>        pGroupMemberDataMap_type;

    typedef Zen::Database::I_DatabaseService::pDatabaseConnection_type      pDatabaseConnection_type;

    typedef Zen::Memory::managed_ptr<I_GroupMemberDataCollection>  pGroupMemberDataCollection_type;
    typedef Zen::Event::future_return_value<pGroupMemberDataCollection_type>  FutureGroupMemberDataCollection_type;
	typedef Zen::Memory::managed_ptr<FutureGroupMemberDataCollection_type>    pFutureGroupMemberDataCollection_type;
    
    typedef Zen::Memory::managed_ptr<I_GroupMemberDomainObject>  pGroupMemberDomainObject_type;
    typedef Zen::Event::future_return_value<pGroupMemberDomainObject_type>  FutureGroupMemberDomainObject_type;
	typedef Zen::Memory::managed_ptr<FutureGroupMemberDomainObject_type>    pFutureGroupMemberDomainObject_type;
    /// @}

    /// @name I_GroupMemberDataMap interface
    /// @{
public:
    /// Create a new GroupMemberDomainObject.
    virtual pGroupMemberDomainObject_type createNew() = 0;
    
    /// Get an object by primary key.
    virtual pFutureGroupMemberDomainObject_type getByKey(boost::uint64_t _primaryKeyValue) = 0;

    /// Delete an object by primary key.
    virtual void deleteByKey(boost::uint64_t _primaryKeyValue) = 0;

    /// Get a collection of group members by uid.    
    virtual pFutureGroupMemberDataCollection_type getByAccountId(boost::uint64_t _accountId) = 0;

    /// Get a collection of group members by gid.    
    virtual pFutureGroupMemberDataCollection_type getByGroupId(boost::uint64_t _groupId) = 0;

    /// Get all of the records.
    virtual pFutureGroupMemberDataCollection_type getAll() = 0;

    /// Update a GroupMemberDomainObject.
    /// If the GroupMemberDomainObject hasn't been inserted yet, it will be inserted.
    virtual Zen::Database::I_DatabaseTransaction::pFutureKey_type update(pGroupMemberDomainObject_type _pGroupMemberDomainObject) = 0;
    /// @}

    /// @name Static class factory
    /// @{
public:
    static pGroupMemberDataMap_type create(pDatabaseConnection_type _pDatabaseConnection);
    /// @}

    /// @name 'Structors
    /// @{
protected:
             I_GroupMemberDataMap();
    virtual ~I_GroupMemberDataMap();
    /// @}

};  // interface I_GroupMemberDataMap

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
}   // namespace Zen
}   // namespace Community
}   // namespace Account
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

namespace Zen {
namespace Memory {
    /// I_GroupMemberDataMap is a managed by factory
    template<>
    struct is_managed_by_factory<Zen::Community::Account::I_GroupMemberDataMap> : public boost::true_type{};
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
}   // namespace Memory
}   // namespace Zen
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

#endif // ZEN_COMMUNITY_ACCOUNT_I_GROUPMEMBER_DATA_MAP_HPP_INCLUDED
