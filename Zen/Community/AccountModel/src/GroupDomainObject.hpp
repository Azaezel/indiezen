//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
// Zen Spaces
//
// Copyright (C) 2001 - 2009 Tony Richards
//
// Licensed under the Games by Sarge Publishing License - See your licensing
// agreement for terms and conditions.
//
// Do not redistribute this source code.
//
// Tony Richards trichards@gamesbysarge.com
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
// This is generated by the Zen Spaces Code Generator.  Do not modify!
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
#ifndef ZEN_COMMUNITY_ACCOUNT_GROUP_DOMAIN_OBJECT_HPP_INCLUDED
#define ZEN_COMMUNITY_ACCOUNT_GROUP_DOMAIN_OBJECT_HPP_INCLUDED

#include "../I_GroupDomainObject.hpp"

#include <map>

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
namespace Zen {
namespace Community {
namespace Account {
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~


class GroupDomainObject
:	public I_GroupDomainObject
{
    /// @name Types
    /// @{
public:
    typedef std::map<std::string, pElement_type>    FieldElementMap_type;
    /// @}

    /// @name Getter / Setter methods
    /// @{
public:
    /// Get the GroupId element.
    /// Use this return value to check to see if the column is NULL in the database,
    /// or you can use it to modify the value instead of calling setGroupId().
    virtual ElementReference_type getGroupId() const;
    
    /// Set the GroupId element value.
    /// This method does not directly update the database.  
    /// You must use the I_GroupDataMap::update() method for the modifications
    /// to be persisted.
    virtual void setGroupId(const boost::any& _value);

    /// Get the GroupName element.
    /// Use this return value to check to see if the column is NULL in the database,
    /// or you can use it to modify the value instead of calling setGroupName().
    virtual ElementReference_type getGroupName() const;
    
    /// Set the GroupName element value.
    /// This method does not directly update the database.  
    /// You must use the I_GroupDataMap::update() method for the modifications
    /// to be persisted.
    virtual void setGroupName(const boost::any& _value);

    /// Get the GroupDescription element.
    /// Use this return value to check to see if the column is NULL in the database,
    /// or you can use it to modify the value instead of calling setGroupDescription().
    virtual ElementReference_type getGroupDescription() const;
    
    /// Set the GroupDescription element value.
    /// This method does not directly update the database.  
    /// You must use the I_GroupDataMap::update() method for the modifications
    /// to be persisted.
    virtual void setGroupDescription(const boost::any& _value);
    
    virtual Zen::Enterprise::DataModel::I_DataElement& getElement(const std::string& _fieldName);
    /// @}

    /// @name Member Variables
    /// @{
private:
    pElement_type               m_pGroupId;
    pElement_type               m_pGroupName;
    pElement_type               m_pGroupDescription;

    FieldElementMap_type            m_elements;
    /// @}

    /// @name 'Structors
    /// @{
public:
             GroupDomainObject();
    virtual ~GroupDomainObject();
    /// @}

};  // class GroupDomainObject

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
}   // namespace Zen
}   // namespace Community
}   // namespace Account
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~


#endif // ZEN_COMMUNITY_ACCOUNT_GROUP_DOMAIN_OBJECT_HPP_INCLUDED
