//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
// Zen Spaces
//
// Copyright (C) 2001 - 2009 Tony Richards
//
// Licensed under the Games by Sarge Publishing License - See your licensing
// agreement for terms and conditions.
//
// Do not redistribute this source code.
//
// Tony Richards trichards@gamesbysarge.com
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
// This is generated by the Zen Spaces Code Generator.  Do not modify!
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
#ifndef ZEN_COMMUNITY_CHAT_I_CHATCHANNEL_DATA_MAP_HPP_INCLUDED
#define ZEN_COMMUNITY_CHAT_I_CHATCHANNEL_DATA_MAP_HPP_INCLUDED

#include "Configuration.hpp"

#include <Zen/Core/Memory/managed_ptr.hpp>

#include <Zen/Enterprise/Database/I_DatabaseConnection.hpp>
#include <Zen/Enterprise/Database/I_DatabaseService.hpp>
#include <Zen/Enterprise/Database/I_DatabaseTransaction.hpp>

#include <boost/cstdint.hpp>

#include <boost/noncopyable.hpp>

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
namespace Zen {
namespace Community {
namespace Chat {
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

class I_ChatChannelDomainObject;
class I_ChatChannelDataCollection;

class CHATMODEL_DLL_LINK I_ChatChannelDataMap
:	public boost::noncopyable
{

    /// @name Types
    /// @{
public:
//    typedef Zen::Memory::managed_ptr<I_ChatChannelDomainObject>   pChatChannelDomainObject_type;
//    typedef Zen::Memory::managed_ptr<I_ChatChannelDataCollection>     pChatChannelDataCollection_type;
    typedef Zen::Memory::managed_ptr<I_ChatChannelDataMap>        pChatChannelDataMap_type;

    typedef Zen::Database::I_DatabaseService::pDatabaseConnection_type      pDatabaseConnection_type;

    typedef Zen::Memory::managed_ptr<I_ChatChannelDataCollection>  pChatChannelDataCollection_type;
    typedef Zen::Event::future_return_value<pChatChannelDataCollection_type>  FutureChatChannelDataCollection_type;
	typedef Zen::Memory::managed_ptr<FutureChatChannelDataCollection_type>    pFutureChatChannelDataCollection_type;
    
    typedef Zen::Memory::managed_ptr<I_ChatChannelDomainObject>  pChatChannelDomainObject_type;
    typedef Zen::Event::future_return_value<pChatChannelDomainObject_type>  FutureChatChannelDomainObject_type;
	typedef Zen::Memory::managed_ptr<FutureChatChannelDomainObject_type>    pFutureChatChannelDomainObject_type;
    /// @}

    /// @name I_ChatChannelDataMap interface
    /// @{
public:
    /// Create a new ChatChannelDomainObject.
    virtual pChatChannelDomainObject_type createNew() = 0;
    
    /// Get an object by primary key.
    virtual pFutureChatChannelDomainObject_type getByKey(boost::uint64_t _primaryKeyValue) = 0;

    /// Delete an object by primary key.
    virtual void deleteByKey(boost::uint64_t _primaryKeyValue) = 0;

    /// Get all of the records.
    virtual pFutureChatChannelDataCollection_type getAll() = 0;

    /// Update a ChatChannelDomainObject.
    /// If the ChatChannelDomainObject hasn't been inserted yet, it will be inserted.
    virtual Zen::Database::I_DatabaseTransaction::pFutureKey_type update(pChatChannelDomainObject_type _pChatChannelDomainObject) = 0;
    /// @}

    /// @name Static class factory
    /// @{
public:
    static pChatChannelDataMap_type create(pDatabaseConnection_type _pDatabaseConnection);
    /// @}

    /// @name 'Structors
    /// @{
protected:
             I_ChatChannelDataMap();
    virtual ~I_ChatChannelDataMap();
    /// @}

};  // interface I_ChatChannelDataMap

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
}   // namespace Zen
}   // namespace Community
}   // namespace Chat
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

namespace Zen {
namespace Memory {
    /// I_ChatChannelDataMap is a managed by factory
    template<>
    struct is_managed_by_factory<Zen::Community::Chat::I_ChatChannelDataMap> : public boost::true_type{};
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
}   // namespace Memory
}   // namespace Zen
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

#endif // ZEN_COMMUNITY_CHAT_I_CHATCHANNEL_DATA_MAP_HPP_INCLUDED
