//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
// Zen Spaces
//
// Copyright (C) 2001 - 2009 Tony Richards
//
// Licensed under the Games by Sarge Publishing License - See your licensing
// agreement for terms and conditions.
//
// Do not redistribute this source code.
//
// Tony Richards trichards@gamesbysarge.com
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
// This is generated by the Zen Spaces Code Generator.  Do not modify!
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
#ifndef ZEN_COMMUNITY_CHAT_CHATCOMMAND_DOMAIN_OBJECT_HPP_INCLUDED
#define ZEN_COMMUNITY_CHAT_CHATCOMMAND_DOMAIN_OBJECT_HPP_INCLUDED

#include "../I_ChatCommandDomainObject.hpp"

#include <map>

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
namespace Zen {
namespace Community {
namespace Chat {
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~


class ChatCommandDomainObject
:	public I_ChatCommandDomainObject
{
    /// @name Types
    /// @{
public:
    typedef std::map<std::string, pElement_type>    FieldElementMap_type;
    /// @}

    /// @name Getter / Setter methods
    /// @{
public:
    /// Get the ChatCommandId element.
    /// Use this return value to check to see if the column is NULL in the database,
    /// or you can use it to modify the value instead of calling setChatCommandId().
    virtual ElementReference_type getChatCommandId() const;
    
    /// Set the ChatCommandId element value.
    /// This method does not directly update the database.  
    /// You must use the I_ChatCommandDataMap::update() method for the modifications
    /// to be persisted.
    virtual void setChatCommandId(const boost::any& _value);

    /// Get the Token element.
    /// Use this return value to check to see if the column is NULL in the database,
    /// or you can use it to modify the value instead of calling setToken().
    virtual ElementReference_type getToken() const;
    
    /// Set the Token element value.
    /// This method does not directly update the database.  
    /// You must use the I_ChatCommandDataMap::update() method for the modifications
    /// to be persisted.
    virtual void setToken(const boost::any& _value);

    /// Get the Action element.
    /// Use this return value to check to see if the column is NULL in the database,
    /// or you can use it to modify the value instead of calling setAction().
    virtual ElementReference_type getAction() const;
    
    /// Set the Action element value.
    /// This method does not directly update the database.  
    /// You must use the I_ChatCommandDataMap::update() method for the modifications
    /// to be persisted.
    virtual void setAction(const boost::any& _value);

    /// Get the Response element.
    /// Use this return value to check to see if the column is NULL in the database,
    /// or you can use it to modify the value instead of calling setResponse().
    virtual ElementReference_type getResponse() const;
    
    /// Set the Response element value.
    /// This method does not directly update the database.  
    /// You must use the I_ChatCommandDataMap::update() method for the modifications
    /// to be persisted.
    virtual void setResponse(const boost::any& _value);

    /// Get the Flags element.
    /// Use this return value to check to see if the column is NULL in the database,
    /// or you can use it to modify the value instead of calling setFlags().
    virtual ElementReference_type getFlags() const;
    
    /// Set the Flags element value.
    /// This method does not directly update the database.  
    /// You must use the I_ChatCommandDataMap::update() method for the modifications
    /// to be persisted.
    virtual void setFlags(const boost::any& _value);

    /// Get the OwnerId element.
    /// Use this return value to check to see if the column is NULL in the database,
    /// or you can use it to modify the value instead of calling setOwnerId().
    virtual ElementReference_type getOwnerId() const;
    
    /// Set the OwnerId element value.
    /// This method does not directly update the database.  
    /// You must use the I_ChatCommandDataMap::update() method for the modifications
    /// to be persisted.
    virtual void setOwnerId(const boost::any& _value);

    /// Get the GroupId element.
    /// Use this return value to check to see if the column is NULL in the database,
    /// or you can use it to modify the value instead of calling setGroupId().
    virtual ElementReference_type getGroupId() const;
    
    /// Set the GroupId element value.
    /// This method does not directly update the database.  
    /// You must use the I_ChatCommandDataMap::update() method for the modifications
    /// to be persisted.
    virtual void setGroupId(const boost::any& _value);
    
    virtual Zen::Enterprise::DataModel::I_DataElement& getElement(const std::string& _fieldName);
    /// @}

    /// @name Member Variables
    /// @{
private:
    pElement_type               m_pChatCommandId;
    pElement_type               m_pToken;
    pElement_type               m_pAction;
    pElement_type               m_pResponse;
    pElement_type               m_pFlags;
    pElement_type               m_pOwnerId;
    pElement_type               m_pGroupId;

    FieldElementMap_type            m_elements;
    /// @}

    /// @name 'Structors
    /// @{
public:
             ChatCommandDomainObject();
    virtual ~ChatCommandDomainObject();
    /// @}

};  // class ChatCommandDomainObject

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
}   // namespace Zen
}   // namespace Community
}   // namespace Chat
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~


#endif // ZEN_COMMUNITY_CHAT_CHATCOMMAND_DOMAIN_OBJECT_HPP_INCLUDED
