//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
// Zen Protocol
//
// Copyright (C) 2001 - 2009 Tony Richards
// Copyright (C) 2008 - 2009 Matthew Alan Gray
//
// Licensed under the Games by Sarge Publishing License - See your licensing
// agreement for terms and conditions.
//
// Do not redistribute this source code.
//
// Tony Richards trichards@gamesbysarge.com
// Matthew Alan Gray mgray@indiezen.org
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
// This is generated by the Zen Protocol Code Generator.  Do not modify!
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
#ifndef GAMEBUILDER_CREATECHILDNODE_RESPONSE_HPP_INCLUDED
#define GAMEBUILDER_CREATECHILDNODE_RESPONSE_HPP_INCLUDED

#include "../I_CreateChildNodeResponse.hpp"

#include "Response.hpp"

#include <Zen/Enterprise/AppServer/I_MessageFactory.hpp>
#include <Zen/Enterprise/AppServer/I_MessageType.hpp>

#include <boost/cstdint.hpp>
#include <boost/serialization/string.hpp>
#include <string>

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
namespace Zen {
    namespace Enterprise {
        namespace AppServer {
            class I_ApplicationServer;
            class I_MessageRegistry;
            class I_MessageType;
        }   // namespace AppServer
    }   // namespace Enterprise
}   // namespace Zen
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
namespace GameBuilder {
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
class CreateChildNodeResponse
:   public I_CreateChildNodeResponse
,   public Response
{
    /// @name Types
    /// @{
public:
    enum { type = 102 };  // TODO Should we be hardcoding this?
    
    typedef Zen::Memory::managed_weak_ptr<Zen::Enterprise::AppServer::I_Response>    wpResponse_type;
    /// @}

    /// @name Zen::Enterprise::AppServer::I_Message implementation
    /// @{
public:
    virtual pEndpoint_type getSourceEndpoint() { return Message::getSourceEndpoint(); }
    virtual pEndpoint_type getDestinationEndpoint() { return Message::getDestinationEndpoint(); }
    virtual pMessageHeader_type getMessageHeader() const { return Message::getMessageHeader(); }

    virtual pResourceLocation_type getDestinationLocation();
    virtual void serialize(pMessageHeader_type _pMessageHeader, boost::archive::polymorphic_iarchive& _archive, const int _version);
    virtual void serialize(boost::archive::polymorphic_oarchive& _archive, const int _version);
    /// @}

    /// @name I_Message implementation
    /// @{
public:
    virtual boost::uint32_t getMessageId() const { return Message::getMessageId(); } 
    virtual pMessageType_type getMessageType() const { return getStaticMessageType(); }
    /// @}

    /// @name Dominance for Response
    /// @{
public:
    virtual unsigned int getRequestMessageId() const { return Response::getRequestMessageId(); }
    /// @}
    /// @name Static methods
    /// @{
public:
    static void registerMessage(Zen::Enterprise::AppServer::I_ApplicationServer& _appServer);

    static pMessageHeader_type createMessageHeader(boost::uint32_t _messageId, boost::uint32_t _requestId);

    static void destroy(wpResponse_type _wpResponse);
    
    static pMessageType_type getStaticMessageType();    
    /// @}
    
    /// @name 'Structors
    /// @{
protected:
    friend class I_CreateChildNodeResponse;
    friend class MessageFactory;
             /// This constructor is used by the static create
             /// methods for creating outbound messages.
             CreateChildNodeResponse(pEndpoint_type _pSourceEndpoint,
                           pEndpoint_type _pDestinationEndpoint, boost::uint32_t _requestMessageId);
             /// This constructor is used by the message factory
             /// for creating inbound messages.
             CreateChildNodeResponse(pMessageHeader_type _pMessageHeader,
                           pEndpoint_type _pSourceEndpoint,
                           pEndpoint_type _pDestinationEndpoint);
    virtual ~CreateChildNodeResponse();
    /// @}

    /// @name Member Variables
    /// @{
private:
    unsigned int                    m_id;

    static pMessageType_type                                sm_pType;
    static Zen::Enterprise::AppServer::I_MessageRegistry*   sm_pMessageRegistry;
   
    
    /// @}

};  // class CreateChildNodeResponse

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
}   // namespace GameBuilder
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

#endif // GAMEBUILDER_CREATECHILDNODE_RESPONSE_HPP_INCLUDED
