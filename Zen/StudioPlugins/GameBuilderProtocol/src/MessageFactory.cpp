//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
// Zen Protocol
//
// Copyright (C) 2001 - 2009 Tony Richards
// Copyright (C) 2008 - 2009 Matthew Alan Gray
//
// Licensed under the Games by Sarge Publishing License - See your licensing
// agreement for terms and conditions.
//
// Do not redistribute this source code.
//
// Tony Richards trichards@gamesbysarge.com
// Matthew Alan Gray mgray@indiezen.org
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
// This is generated by the Zen Protocol Code Generator.  Do not modify!
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
#include "MessageFactory.hpp"
#include "Message.hpp"

#include "DeleteChildNodeRequest.hpp"
#include "DeleteChildNodeResponse.hpp"

#include "CreateChildNodeRequest.hpp"
#include "CreateChildNodeResponse.hpp"


#include <Zen/Enterprise/AppServer/I_NumericTypeMessageRegistry.hpp>
#include <Zen/Enterprise/AppServer/I_MessageHeader.hpp>

#include <Zen/Enterprise/Networking/I_Endpoint.hpp>

#include <Zen/Core/Utility/runtime_exception.hpp>

#include <iostream>

#include <stddef.h>

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
namespace GameBuilder {
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
MessageFactory::MessageFactory()
{
}

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
MessageFactory::~MessageFactory()
{
}

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
void
MessageFactory::destroy(MessageFactory::wpMessage_type _pMessage)
{
    Message* pMessage = dynamic_cast<Message*>(_pMessage.get());
    
    if (pMessage != NULL)
    {
        delete pMessage;
    }
    else
    {
        // TODO Error
    }
}

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
MessageFactory::pMessage_type
MessageFactory::create(pMessageHeader_type _pMessageHeader, pEndpoint_type _pSourceEndpoint, pEndpoint_type _pDestinationEndpoint)
{
    switch(getMessageType(_pMessageHeader))
    {
        case DeleteChildNodeRequest::type:
            return pMessage_type(new DeleteChildNodeRequest(_pMessageHeader,
                                    _pSourceEndpoint, 
                                    _pDestinationEndpoint),
                                 &destroy);

        case CreateChildNodeRequest::type:
            return pMessage_type(new CreateChildNodeRequest(_pMessageHeader,
                                    _pSourceEndpoint, 
                                    _pDestinationEndpoint),
                                 &destroy);

        case DeleteChildNodeResponse::type:
            return pMessage_type(new DeleteChildNodeResponse(_pMessageHeader,
                                    _pSourceEndpoint, 
                                    _pDestinationEndpoint),
                                 &destroy);

        case CreateChildNodeResponse::type:
            return pMessage_type(new CreateChildNodeResponse(_pMessageHeader,
                                    _pSourceEndpoint, 
                                    _pDestinationEndpoint),
                                 &destroy);

   
    }

    // TODO Throw an exception?
    std::cout << "GameBuilderMessageFactory::getMessageType(): Error, wrong message type - " <<
            getMessageType(_pMessageHeader) << std::endl;

    return pMessage_type();
}
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

boost::uint32_t
MessageFactory::getMessageType(pMessageHeader_type _pMessageHeader)
{
    // Assume this is a numeric type.
    Zen::Enterprise::AppServer::I_NumericTypeMessageRegistry::I_NumericType*
        pType = dynamic_cast<Zen::Enterprise::AppServer::I_NumericTypeMessageRegistry::I_NumericType*>
            (_pMessageHeader->getMessageType().get());

    if (pType != NULL)
    {
        return pType->getType();
    }
    else
    {        
        throw Zen::Utility::runtime_exception("MessageFactory::getMessageType(): Error, invalid message type.");
    }
}

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
}   // namespace GameBuilder
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
