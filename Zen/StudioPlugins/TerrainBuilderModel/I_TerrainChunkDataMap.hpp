//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
// Zen Spaces
//
// Copyright (C) 2001 - 2009 Tony Richards
//
// Licensed under the Games by Sarge Publishing License - See your licensing
// agreement for terms and conditions.
//
// Do not redistribute this source code.
//
// Tony Richards trichards@gamesbysarge.com
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
// This is generated by the Zen Spaces Code Generator.  Do not modify!
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
#ifndef TERRAINBUILDER_I_TERRAINCHUNK_DATA_MAP_HPP_INCLUDED
#define TERRAINBUILDER_I_TERRAINCHUNK_DATA_MAP_HPP_INCLUDED

#include "Configuration.hpp"

#include <Zen/Core/Memory/managed_ptr.hpp>

#include <Zen/Enterprise/Database/I_DatabaseConnection.hpp>
#include <Zen/Enterprise/Database/I_DatabaseService.hpp>
#include <Zen/Enterprise/Database/I_DatabaseTransaction.hpp>

#include <boost/cstdint.hpp>

#include <boost/noncopyable.hpp>

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
namespace TerrainBuilder {
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

class I_TerrainChunkDomainObject;
class I_TerrainChunkDataCollection;

class TERRAINBUILDERMODEL_DLL_LINK I_TerrainChunkDataMap
:	public boost::noncopyable
{

    /// @name Types
    /// @{
public:
//    typedef Zen::Memory::managed_ptr<I_TerrainChunkDomainObject>   pTerrainChunkDomainObject_type;
//    typedef Zen::Memory::managed_ptr<I_TerrainChunkDataCollection>     pTerrainChunkDataCollection_type;
    typedef Zen::Memory::managed_ptr<I_TerrainChunkDataMap>        pTerrainChunkDataMap_type;

    typedef Zen::Database::I_DatabaseService::pDatabaseConnection_type      pDatabaseConnection_type;

    typedef Zen::Memory::managed_ptr<I_TerrainChunkDataCollection>  pTerrainChunkDataCollection_type;
    typedef Zen::Event::future_return_value<pTerrainChunkDataCollection_type>  FutureTerrainChunkDataCollection_type;
	typedef Zen::Memory::managed_ptr<FutureTerrainChunkDataCollection_type>    pFutureTerrainChunkDataCollection_type;
    
    typedef Zen::Memory::managed_ptr<I_TerrainChunkDomainObject>  pTerrainChunkDomainObject_type;
    typedef Zen::Event::future_return_value<pTerrainChunkDomainObject_type>  FutureTerrainChunkDomainObject_type;
	typedef Zen::Memory::managed_ptr<FutureTerrainChunkDomainObject_type>    pFutureTerrainChunkDomainObject_type;
    /// @}

    /// @name I_TerrainChunkDataMap interface
    /// @{
public:
    /// Create a new TerrainChunkDomainObject.
    virtual pTerrainChunkDomainObject_type createNew() = 0;
    
    /// Get an object by primary key.
    virtual pFutureTerrainChunkDomainObject_type getByKey(boost::uint64_t _primaryKeyValue) = 0;

    /// Delete an object by primary key.
    virtual void deleteByKey(boost::uint64_t _primaryKeyValue) = 0;

    /// Get a collection of TerrainChunkNodes by explorerNodeId.    
    virtual pFutureTerrainChunkDataCollection_type getByExplorerNodeId(const boost::uint64_t _explorerNodeId) = 0;

    /// Get all of the records.
    virtual pFutureTerrainChunkDataCollection_type getAll() = 0;

    /// Update a TerrainChunkDomainObject.
    /// If the TerrainChunkDomainObject hasn't been inserted yet, it will be inserted.
    virtual Zen::Database::I_DatabaseTransaction::pFutureKey_type update(pTerrainChunkDomainObject_type _pTerrainChunkDomainObject) = 0;
    /// @}

    /// @name Static class factory
    /// @{
public:
    static pTerrainChunkDataMap_type create(pDatabaseConnection_type _pDatabaseConnection);
    /// @}

    /// @name 'Structors
    /// @{
protected:
             I_TerrainChunkDataMap();
    virtual ~I_TerrainChunkDataMap();
    /// @}

};  // interface I_TerrainChunkDataMap

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
}   // namespace TerrainBuilder
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

namespace Zen {
namespace Memory {
    /// I_TerrainChunkDataMap is a managed by factory
    template<>
    struct is_managed_by_factory<TerrainBuilder::I_TerrainChunkDataMap> : public boost::true_type{};
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
}   // namespace Memory
}   // namespace Zen
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

#endif // TERRAINBUILDER_I_TERRAINCHUNK_DATA_MAP_HPP_INCLUDED
