//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
// Zen Spaces
//
// Copyright (C) 2001 - 2009 Tony Richards
//
// Licensed under the Games by Sarge Publishing License - See your licensing
// agreement for terms and conditions.
//
// Do not redistribute this source code.
//
// Tony Richards trichards@gamesbysarge.com
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
// This is generated by the Zen Spaces Code Generator.  Do not modify!
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
#ifndef ARTLIBRARY_I_ARTFOLDER_DATA_MAP_HPP_INCLUDED
#define ARTLIBRARY_I_ARTFOLDER_DATA_MAP_HPP_INCLUDED

#include "Configuration.hpp"

#include <Zen/Core/Memory/managed_ptr.hpp>

#include <Zen/Enterprise/Database/I_DatabaseConnection.hpp>
#include <Zen/Enterprise/Database/I_DatabaseService.hpp>
#include <Zen/Enterprise/Database/I_DatabaseTransaction.hpp>

#include <boost/cstdint.hpp>

#include <boost/noncopyable.hpp>

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
namespace ArtLibrary {
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

class I_ArtFolderDomainObject;
class I_ArtFolderDataCollection;

class ARTLIBRARYMODEL_DLL_LINK I_ArtFolderDataMap
:	public boost::noncopyable
{

    /// @name Types
    /// @{
public:
//    typedef Zen::Memory::managed_ptr<I_ArtFolderDomainObject>   pArtFolderDomainObject_type;
//    typedef Zen::Memory::managed_ptr<I_ArtFolderDataCollection>     pArtFolderDataCollection_type;
    typedef Zen::Memory::managed_ptr<I_ArtFolderDataMap>        pArtFolderDataMap_type;

    typedef Zen::Database::I_DatabaseService::pDatabaseConnection_type      pDatabaseConnection_type;

    typedef Zen::Memory::managed_ptr<I_ArtFolderDataCollection>  pArtFolderDataCollection_type;
    typedef Zen::Event::future_return_value<pArtFolderDataCollection_type>  FutureArtFolderDataCollection_type;
	typedef Zen::Memory::managed_ptr<FutureArtFolderDataCollection_type>    pFutureArtFolderDataCollection_type;
    
    typedef Zen::Memory::managed_ptr<I_ArtFolderDomainObject>  pArtFolderDomainObject_type;
    typedef Zen::Event::future_return_value<pArtFolderDomainObject_type>  FutureArtFolderDomainObject_type;
	typedef Zen::Memory::managed_ptr<FutureArtFolderDomainObject_type>    pFutureArtFolderDomainObject_type;
    /// @}

    /// @name I_ArtFolderDataMap interface
    /// @{
public:
    /// Create a new ArtFolderDomainObject.
    virtual pArtFolderDomainObject_type createNew() = 0;
    
    /// Get an object by primary key.
    virtual pFutureArtFolderDomainObject_type getByKey(boost::uint64_t _primaryKeyValue) = 0;

    /// Delete an object by primary key.
    virtual void deleteByKey(boost::uint64_t _primaryKeyValue) = 0;

    /// Get a collection of Art Folders by explorerNodeId.    
    virtual pFutureArtFolderDataCollection_type getByExplorerNodeId(const boost::uint64_t _explorerNodeId) = 0;

    /// Get all of the records.
    virtual pFutureArtFolderDataCollection_type getAll() = 0;

    /// Update a ArtFolderDomainObject.
    /// If the ArtFolderDomainObject hasn't been inserted yet, it will be inserted.
    virtual Zen::Database::I_DatabaseTransaction::pFutureKey_type update(pArtFolderDomainObject_type _pArtFolderDomainObject) = 0;
    /// @}

    /// @name Static class factory
    /// @{
public:
    static pArtFolderDataMap_type create(pDatabaseConnection_type _pDatabaseConnection);
    /// @}

    /// @name 'Structors
    /// @{
protected:
             I_ArtFolderDataMap();
    virtual ~I_ArtFolderDataMap();
    /// @}

};  // interface I_ArtFolderDataMap

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
}   // namespace ArtLibrary
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

namespace Zen {
namespace Memory {
    /// I_ArtFolderDataMap is a managed by factory
    template<>
    struct is_managed_by_factory<ArtLibrary::I_ArtFolderDataMap> : public boost::true_type{};
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
}   // namespace Memory
}   // namespace Zen
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

#endif // ARTLIBRARY_I_ARTFOLDER_DATA_MAP_HPP_INCLUDED
