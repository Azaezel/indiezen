//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
// Zen Spaces
//
// Copyright (C) 2001 - 2009 Tony Richards
//
// Licensed under the Games by Sarge Publishing License - See your licensing
// agreement for terms and conditions.
//
// Do not redistribute this source code.
//
// Tony Richards trichards@gamesbysarge.com
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
// This is generated by the Zen Spaces Code Generator.  Do not modify!
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
#ifndef ARTLIBRARY_I_ARTASSETEXPLORERNODE_DATA_MAP_HPP_INCLUDED
#define ARTLIBRARY_I_ARTASSETEXPLORERNODE_DATA_MAP_HPP_INCLUDED

#include "Configuration.hpp"

#include <Zen/Core/Memory/managed_ptr.hpp>

#include <Zen/Enterprise/Database/I_DatabaseConnection.hpp>
#include <Zen/Enterprise/Database/I_DatabaseService.hpp>
#include <Zen/Enterprise/Database/I_DatabaseTransaction.hpp>

#include <boost/cstdint.hpp>

#include <boost/noncopyable.hpp>

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
namespace ArtLibrary {
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

class I_ArtAssetExplorerNodeDomainObject;
class I_ArtAssetExplorerNodeDataCollection;

class ARTLIBRARYMODEL_DLL_LINK I_ArtAssetExplorerNodeDataMap
:	public boost::noncopyable
{

    /// @name Types
    /// @{
public:
//    typedef Zen::Memory::managed_ptr<I_ArtAssetExplorerNodeDomainObject>   pArtAssetExplorerNodeDomainObject_type;
//    typedef Zen::Memory::managed_ptr<I_ArtAssetExplorerNodeDataCollection>     pArtAssetExplorerNodeDataCollection_type;
    typedef Zen::Memory::managed_ptr<I_ArtAssetExplorerNodeDataMap>        pArtAssetExplorerNodeDataMap_type;

    typedef Zen::Database::I_DatabaseService::pDatabaseConnection_type      pDatabaseConnection_type;

    typedef Zen::Memory::managed_ptr<I_ArtAssetExplorerNodeDataCollection>  pArtAssetExplorerNodeDataCollection_type;
    typedef Zen::Event::future_return_value<pArtAssetExplorerNodeDataCollection_type>  FutureArtAssetExplorerNodeDataCollection_type;
	typedef Zen::Memory::managed_ptr<FutureArtAssetExplorerNodeDataCollection_type>    pFutureArtAssetExplorerNodeDataCollection_type;
    
    typedef Zen::Memory::managed_ptr<I_ArtAssetExplorerNodeDomainObject>  pArtAssetExplorerNodeDomainObject_type;
    typedef Zen::Event::future_return_value<pArtAssetExplorerNodeDomainObject_type>  FutureArtAssetExplorerNodeDomainObject_type;
	typedef Zen::Memory::managed_ptr<FutureArtAssetExplorerNodeDomainObject_type>    pFutureArtAssetExplorerNodeDomainObject_type;
    /// @}

    /// @name I_ArtAssetExplorerNodeDataMap interface
    /// @{
public:
    /// Create a new ArtAssetExplorerNodeDomainObject.
    virtual pArtAssetExplorerNodeDomainObject_type createNew() = 0;
    
    /// Get an object by primary key.
    virtual pFutureArtAssetExplorerNodeDomainObject_type getByKey(boost::uint64_t _primaryKeyValue) = 0;

    /// Delete an object by primary key.
    virtual void deleteByKey(boost::uint64_t _primaryKeyValue) = 0;

    /// Get a collection of Art Asset Explorer Nodes by explorerNodeId.    
    virtual pFutureArtAssetExplorerNodeDataCollection_type getByExplorerNodeId(const boost::uint64_t _explorerNodeId) = 0;

    /// Get all of the records.
    virtual pFutureArtAssetExplorerNodeDataCollection_type getAll() = 0;

    /// Update a ArtAssetExplorerNodeDomainObject.
    /// If the ArtAssetExplorerNodeDomainObject hasn't been inserted yet, it will be inserted.
    virtual Zen::Database::I_DatabaseTransaction::pFutureKey_type update(pArtAssetExplorerNodeDomainObject_type _pArtAssetExplorerNodeDomainObject) = 0;
    /// @}

    /// @name Static class factory
    /// @{
public:
    static pArtAssetExplorerNodeDataMap_type create(pDatabaseConnection_type _pDatabaseConnection);
    /// @}

    /// @name 'Structors
    /// @{
protected:
             I_ArtAssetExplorerNodeDataMap();
    virtual ~I_ArtAssetExplorerNodeDataMap();
    /// @}

};  // interface I_ArtAssetExplorerNodeDataMap

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
}   // namespace ArtLibrary
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

namespace Zen {
namespace Memory {
    /// I_ArtAssetExplorerNodeDataMap is a managed by factory
    template<>
    struct is_managed_by_factory<ArtLibrary::I_ArtAssetExplorerNodeDataMap> : public boost::true_type{};
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
}   // namespace Memory
}   // namespace Zen
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

#endif // ARTLIBRARY_I_ARTASSETEXPLORERNODE_DATA_MAP_HPP_INCLUDED
