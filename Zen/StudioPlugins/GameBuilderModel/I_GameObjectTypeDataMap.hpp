//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
// Zen Spaces
//
// Copyright (C) 2001 - 2009 Tony Richards
//
// Licensed under the Games by Sarge Publishing License - See your licensing
// agreement for terms and conditions.
//
// Do not redistribute this source code.
//
// Tony Richards trichards@gamesbysarge.com
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
// This is generated by the Zen Spaces Code Generator.  Do not modify!
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
#ifndef GAMEBUILDER_I_GAMEOBJECTTYPE_DATA_MAP_HPP_INCLUDED
#define GAMEBUILDER_I_GAMEOBJECTTYPE_DATA_MAP_HPP_INCLUDED

#include "Configuration.hpp"

#include <Zen/Core/Memory/managed_ptr.hpp>

#include <Zen/Enterprise/Database/I_DatabaseConnection.hpp>
#include <Zen/Enterprise/Database/I_DatabaseService.hpp>
#include <Zen/Enterprise/Database/I_DatabaseTransaction.hpp>

#include <boost/cstdint.hpp>

#include <boost/noncopyable.hpp>

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
namespace GameBuilder {
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

class I_GameObjectTypeDomainObject;
class I_GameObjectTypeDataCollection;

class GAMEBUILDERMODEL_DLL_LINK I_GameObjectTypeDataMap
:	public boost::noncopyable
{

    /// @name Types
    /// @{
public:
//    typedef Zen::Memory::managed_ptr<I_GameObjectTypeDomainObject>   pGameObjectTypeDomainObject_type;
//    typedef Zen::Memory::managed_ptr<I_GameObjectTypeDataCollection>     pGameObjectTypeDataCollection_type;
    typedef Zen::Memory::managed_ptr<I_GameObjectTypeDataMap>        pGameObjectTypeDataMap_type;

    typedef Zen::Database::I_DatabaseService::pDatabaseConnection_type      pDatabaseConnection_type;

    typedef Zen::Memory::managed_ptr<I_GameObjectTypeDataCollection>  pGameObjectTypeDataCollection_type;
    typedef Zen::Event::future_return_value<pGameObjectTypeDataCollection_type>  FutureGameObjectTypeDataCollection_type;
	typedef Zen::Memory::managed_ptr<FutureGameObjectTypeDataCollection_type>    pFutureGameObjectTypeDataCollection_type;
    
    typedef Zen::Memory::managed_ptr<I_GameObjectTypeDomainObject>  pGameObjectTypeDomainObject_type;
    typedef Zen::Event::future_return_value<pGameObjectTypeDomainObject_type>  FutureGameObjectTypeDomainObject_type;
	typedef Zen::Memory::managed_ptr<FutureGameObjectTypeDomainObject_type>    pFutureGameObjectTypeDomainObject_type;
    /// @}

    /// @name I_GameObjectTypeDataMap interface
    /// @{
public:
    /// Create a new GameObjectTypeDomainObject.
    virtual pGameObjectTypeDomainObject_type createNew() = 0;
    
    /// Get an object by primary key.
    virtual pFutureGameObjectTypeDomainObject_type getByKey(boost::uint64_t _primaryKeyValue) = 0;

    /// Delete an object by primary key.
    virtual void deleteByKey(boost::uint64_t _primaryKeyValue) = 0;

    /// Get a collection of GameObjectTypes by explorerNodeId.    
    virtual pFutureGameObjectTypeDataCollection_type getByExplorerNodeId(const boost::uint64_t _explorerNodeId) = 0;

    /// Get all of the records.
    virtual pFutureGameObjectTypeDataCollection_type getAll() = 0;

    /// Update a GameObjectTypeDomainObject.
    /// If the GameObjectTypeDomainObject hasn't been inserted yet, it will be inserted.
    virtual Zen::Database::I_DatabaseTransaction::pFutureKey_type update(pGameObjectTypeDomainObject_type _pGameObjectTypeDomainObject) = 0;
    /// @}

    /// @name Static class factory
    /// @{
public:
    static pGameObjectTypeDataMap_type create(pDatabaseConnection_type _pDatabaseConnection);
    /// @}

    /// @name 'Structors
    /// @{
protected:
             I_GameObjectTypeDataMap();
    virtual ~I_GameObjectTypeDataMap();
    /// @}

};  // interface I_GameObjectTypeDataMap

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
}   // namespace GameBuilder
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

namespace Zen {
namespace Memory {
    /// I_GameObjectTypeDataMap is a managed by factory
    template<>
    struct is_managed_by_factory<GameBuilder::I_GameObjectTypeDataMap> : public boost::true_type{};
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
}   // namespace Memory
}   // namespace Zen
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

#endif // GAMEBUILDER_I_GAMEOBJECTTYPE_DATA_MAP_HPP_INCLUDED
