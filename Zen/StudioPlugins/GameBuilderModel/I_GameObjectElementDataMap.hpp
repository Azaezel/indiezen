//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
// Zen Spaces
//
// Copyright (C) 2001 - 2009 Tony Richards
//
// Licensed under the Games by Sarge Publishing License - See your licensing
// agreement for terms and conditions.
//
// Do not redistribute this source code.
//
// Tony Richards trichards@gamesbysarge.com
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
// This is generated by the Zen Spaces Code Generator.  Do not modify!
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
#ifndef GAMEBUILDER_I_GAMEOBJECTELEMENT_DATA_MAP_HPP_INCLUDED
#define GAMEBUILDER_I_GAMEOBJECTELEMENT_DATA_MAP_HPP_INCLUDED

#include "Configuration.hpp"

#include <Zen/Core/Memory/managed_ptr.hpp>

#include <Zen/Enterprise/Database/I_DatabaseConnection.hpp>
#include <Zen/Enterprise/Database/I_DatabaseService.hpp>
#include <Zen/Enterprise/Database/I_DatabaseTransaction.hpp>

#include <boost/cstdint.hpp>

#include <boost/noncopyable.hpp>

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
namespace GameBuilder {
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

class I_GameObjectElementDomainObject;
class I_GameObjectElementDataCollection;

class GAMEBUILDERMODEL_DLL_LINK I_GameObjectElementDataMap
:	public boost::noncopyable
{

    /// @name Types
    /// @{
public:
//    typedef Zen::Memory::managed_ptr<I_GameObjectElementDomainObject>   pGameObjectElementDomainObject_type;
//    typedef Zen::Memory::managed_ptr<I_GameObjectElementDataCollection>     pGameObjectElementDataCollection_type;
    typedef Zen::Memory::managed_ptr<I_GameObjectElementDataMap>        pGameObjectElementDataMap_type;

    typedef Zen::Database::I_DatabaseService::pDatabaseConnection_type      pDatabaseConnection_type;

    typedef Zen::Memory::managed_ptr<I_GameObjectElementDataCollection>  pGameObjectElementDataCollection_type;
    typedef Zen::Event::future_return_value<pGameObjectElementDataCollection_type>  FutureGameObjectElementDataCollection_type;
	typedef Zen::Memory::managed_ptr<FutureGameObjectElementDataCollection_type>    pFutureGameObjectElementDataCollection_type;
    
    typedef Zen::Memory::managed_ptr<I_GameObjectElementDomainObject>  pGameObjectElementDomainObject_type;
    typedef Zen::Event::future_return_value<pGameObjectElementDomainObject_type>  FutureGameObjectElementDomainObject_type;
	typedef Zen::Memory::managed_ptr<FutureGameObjectElementDomainObject_type>    pFutureGameObjectElementDomainObject_type;
    /// @}

    /// @name I_GameObjectElementDataMap interface
    /// @{
public:
    /// Create a new GameObjectElementDomainObject.
    virtual pGameObjectElementDomainObject_type createNew() = 0;
    
    /// Get an object by primary key.
    virtual pFutureGameObjectElementDomainObject_type getByKey(boost::uint64_t _primaryKeyValue) = 0;

    /// Delete an object by primary key.
    virtual void deleteByKey(boost::uint64_t _primaryKeyValue) = 0;

    /// Get a collection of GameObjectElements by gameObjectTypeId.    
    virtual pFutureGameObjectElementDataCollection_type getByGameObjectTypeId(const boost::uint64_t _gameObjectTypeId) = 0;

    /// Get all of the records.
    virtual pFutureGameObjectElementDataCollection_type getAll() = 0;

    /// Update a GameObjectElementDomainObject.
    /// If the GameObjectElementDomainObject hasn't been inserted yet, it will be inserted.
    virtual Zen::Database::I_DatabaseTransaction::pFutureKey_type update(pGameObjectElementDomainObject_type _pGameObjectElementDomainObject) = 0;
    /// @}

    /// @name Static class factory
    /// @{
public:
    static pGameObjectElementDataMap_type create(pDatabaseConnection_type _pDatabaseConnection);
    /// @}

    /// @name 'Structors
    /// @{
protected:
             I_GameObjectElementDataMap();
    virtual ~I_GameObjectElementDataMap();
    /// @}

};  // interface I_GameObjectElementDataMap

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
}   // namespace GameBuilder
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

namespace Zen {
namespace Memory {
    /// I_GameObjectElementDataMap is a managed by factory
    template<>
    struct is_managed_by_factory<GameBuilder::I_GameObjectElementDataMap> : public boost::true_type{};
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
}   // namespace Memory
}   // namespace Zen
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

#endif // GAMEBUILDER_I_GAMEOBJECTELEMENT_DATA_MAP_HPP_INCLUDED
