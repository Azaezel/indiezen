//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
// Zen Spaces
//
// Copyright (C) 2001 - 2009 Tony Richards
//
// Licensed under the Games by Sarge Publishing License - See your licensing
// agreement for terms and conditions.
//
// Do not redistribute this source code.
//
// Tony Richards trichards@gamesbysarge.com
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
// This is generated by the Zen Spaces Code Generator.  Do not modify!
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
#ifndef WORLDBUILDER_I_ZONE_DATA_MAP_HPP_INCLUDED
#define WORLDBUILDER_I_ZONE_DATA_MAP_HPP_INCLUDED

#include "Configuration.hpp"

#include <Zen/Core/Memory/managed_ptr.hpp>

#include <Zen/Enterprise/Database/I_DatabaseConnection.hpp>
#include <Zen/Enterprise/Database/I_DatabaseService.hpp>
#include <Zen/Enterprise/Database/I_DatabaseTransaction.hpp>

#include <boost/cstdint.hpp>

#include <boost/noncopyable.hpp>

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
namespace WorldBuilder {
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

class I_ZoneDomainObject;
class I_ZoneDataCollection;

class WORLDBUILDERMODEL_DLL_LINK I_ZoneDataMap
:	public boost::noncopyable
{

    /// @name Types
    /// @{
public:
//    typedef Zen::Memory::managed_ptr<I_ZoneDomainObject>   pZoneDomainObject_type;
//    typedef Zen::Memory::managed_ptr<I_ZoneDataCollection>     pZoneDataCollection_type;
    typedef Zen::Memory::managed_ptr<I_ZoneDataMap>        pZoneDataMap_type;

    typedef Zen::Database::I_DatabaseService::pDatabaseConnection_type      pDatabaseConnection_type;

    typedef Zen::Memory::managed_ptr<I_ZoneDataCollection>  pZoneDataCollection_type;
    typedef Zen::Event::future_return_value<pZoneDataCollection_type>  FutureZoneDataCollection_type;
	typedef Zen::Memory::managed_ptr<FutureZoneDataCollection_type>    pFutureZoneDataCollection_type;
    
    typedef Zen::Memory::managed_ptr<I_ZoneDomainObject>  pZoneDomainObject_type;
    typedef Zen::Event::future_return_value<pZoneDomainObject_type>  FutureZoneDomainObject_type;
	typedef Zen::Memory::managed_ptr<FutureZoneDomainObject_type>    pFutureZoneDomainObject_type;
    /// @}

    /// @name I_ZoneDataMap interface
    /// @{
public:
    /// Create a new ZoneDomainObject.
    virtual pZoneDomainObject_type createNew() = 0;
    
    /// Get an object by primary key.
    virtual pFutureZoneDomainObject_type getByKey(boost::uint64_t _primaryKeyValue) = 0;

    /// Delete an object by primary key.
    virtual void deleteByKey(boost::uint64_t _primaryKeyValue) = 0;

    /// Get a collection of Zone Folders by explorerNodeId.    
    virtual pFutureZoneDataCollection_type getByExplorerNodeId(const boost::uint64_t _explorerNodeId) = 0;

    /// Get all of the records.
    virtual pFutureZoneDataCollection_type getAll() = 0;

    /// Update a ZoneDomainObject.
    /// If the ZoneDomainObject hasn't been inserted yet, it will be inserted.
    virtual Zen::Database::I_DatabaseTransaction::pFutureKey_type update(pZoneDomainObject_type _pZoneDomainObject) = 0;
    /// @}

    /// @name Static class factory
    /// @{
public:
    static pZoneDataMap_type create(pDatabaseConnection_type _pDatabaseConnection);
    /// @}

    /// @name 'Structors
    /// @{
protected:
             I_ZoneDataMap();
    virtual ~I_ZoneDataMap();
    /// @}

};  // interface I_ZoneDataMap

//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
}   // namespace WorldBuilder
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

namespace Zen {
namespace Memory {
    /// I_ZoneDataMap is a managed by factory
    template<>
    struct is_managed_by_factory<WorldBuilder::I_ZoneDataMap> : public boost::true_type{};
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
}   // namespace Memory
}   // namespace Zen
//-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

#endif // WORLDBUILDER_I_ZONE_DATA_MAP_HPP_INCLUDED
